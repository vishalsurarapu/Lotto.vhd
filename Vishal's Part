--this is the architecture for using switches for the input of the lottory number 
--and to display the output on 7-seg can be attached in the below mentioned spaces.


architecture a_lotto of e_lotto is

	--signal slv_indexinput_int:		std_logic_vector(inputnumber downto 0);
	
	constant n: positive := 5;
	type lotteryinput is array (0 to 4) of unsigned(n-1 downto 0);
	-- type lotteryinput is array (0 to 4) of unresolved_unsigned(n-1 downto 0);

	signal sig_lotteryinput : lotteryinput;
	signal index : natural range 0 to n-1;

begin

	--leds(n-1 downto 0) <= std_ulogic_vector(sig_lotteryinput(index));
	--7-segment display declarations can be done here
	-- set index
	index <= 0;
  
	process(clk)
	begin
	  if (rising_edge(clk)) then
		-- set non indexed values arbitrarily
		for i in 0 to n-1 loop

		  if i = index then
			if switches(1) = '1' then -- up
			  sig_lotteryinput(i) <= sig_lotteryinput(i) + 1;
			  --display the output on 7-seg 
			  --pass the signal to FSM for comparisions 
			end if;

			if switches(2) = '1' then -- down
			  sig_lotteryinput(i) <= sig_lotteryinput(i) + 1;
			  --display the output on 7-seg
			  --pass the signal to FSM for comparisions
			end if;

			if switches(3) = '1' then -- right
			  index <= index + 1;
			  sig_lotteryinput(i) <= sig_lotteryinput(i);
			  --display the output on 7-seg
			  --pass the signal to FSM for comparisions
			end if;

			if switches(4) = '1' then -- left
			  index <= index - 1;
			  sig_lotteryinput(i) <= sig_lotteryinput(i);
			  --display the output on 7-seg
			  --pass the signal to FSM for comparisions
			end if;

		  else
			  sig_lotteryinput(i) <= (others => '0');
		  end if;

		end loop;
	  end if; -- rising clock edge
	end process;

end architecture a_lotto;
